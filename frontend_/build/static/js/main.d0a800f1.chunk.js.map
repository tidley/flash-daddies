{"version":3,"sources":["components/Navbar.js","components/content/Home.js","components/content/LeaderboardRow.js","components/content/Leaderboard.js","components/Content.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","props","className","href","rel","Home","target","Component","LeaderboardRow","console","log","player","rank","username","address","score","Leaderboard","row","leaderboardList","map","i","key","striped","bordered","hover","variant","style","width","Content","exact","to","activeStyle","fontWeight","color","path","component","render","account","setUsername","handleChange","App","state","loadWeb3","bind","this","loadBoguseaderBoard","setState","ll","push","window","ethereum","web3","Web3","enable","currentProvider","alert","evt","name","value","updateLeaderboard","updateLeaderboard2","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d0a800f1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Identicon from 'identicon.js';\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\n\nfunction Navbar(props) {\n\n\n    return (\n      <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\n        <a\n          className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\n          href=\"#\"\n          rel=\"noopener noreferrer\"\n        >\n          Flash Daddies\n        </a>\n        \n        <ul className=\"navbar-nav px-3\">\n          <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\n            <small className=\"text-secondary\">              \n            </small>           \n          </li>\n        </ul>\n      </nav>\n    );\n\n}\n\nexport default Navbar;","import React, { Component } from \"react\";\nimport Button from \"react-bootstrap/Button\";\n \nclass Home extends Component {\n  render() {\n    return (\n      <div>\n        <h2>Extropy CTF</h2>\n        <br></br>\n        <p>\n          The Ethernaut is a Web3/Solidity CTF (Capture The Flag) based game. Each level is a smart contract that needs to be 'hacked'.\n        <br></br><br></br>\n          What separates this CTF from the rest is that it is powered entirely by a smart contract developed by <a href=\"https://extropy.io/\" target=\"_blank\">Extropy.io</a>.\n        <br></br>\n          The leaderboard on this website is maintained entirely by our smart contract; there is no centralized database or backend program that keeps track of users or verifies solutions!\n        <br></br><br></br>\n          In the spirit of open source, contributions and level ideas can made by anyone by submitting a pull request at <a href=\"https://github.com/ExtropyIO\" target=\"_blank\">github.com/ExtropyIO/ExtropyCTF</a>.\n        <br></br><br></br>          \n        </p>\n      </div>\n    );\n  }\n}\n \nexport default Home;\n","import React from \"react\"\n\nfunction LeaderboardRow(props) {\n\tconsole.log(props.player)\n    return (\n        <tr>\n          <td>{props.rank}</td>\n          <td>{props.player.username}</td>\n          <td>{props.player.address}</td>\n          <td>{props.player.score}</td>\n        </tr>\n    )\n}\n\nexport default LeaderboardRow","import React, { Component, useEffect } from \"react\";\nimport Table from 'react-bootstrap/Table';\nimport LeaderboardRow from \"./LeaderboardRow\"\n \nfunction Leaderboard(props) {\n  // useEffect(() => {\n  //   props.getLeaderboard()\n  // }, [])\n  const row = props.leaderboardList.map((player, i) => <LeaderboardRow key={i+1} rank={i+1} player={player} />)\n  return (\n    <div>\n      <h2>Scammers leaderboard</h2>\n      <br></br>\n      <Table striped bordered hover variant=\"dark\">\n        <thead>\n          <tr>\n\t\t\t<th style={{width: '10%'}}>World Ranking</th>\n            <th style={{width: '20%'}}>Name</th>\n            <th style={{width: '20%'}}>Account</th>\n            <th>Score</th>\n          </tr>\n        </thead>\n        <tbody>\n          {row}\n        </tbody>\n      </Table>\n\n    </div>\n\n  );\n}\n \nexport default Leaderboard;\n","import React, { Component } from \"react\";\nimport {\n  Route,\n  NavLink,\n  HashRouter\n} from \"react-router-dom\";\nimport Home from \"./content/Home\";\nimport Leaderboard from \"./content/Leaderboard\";\n \nfunction Content(props) {\n    return (\n      <HashRouter>\n        <div className=\"row mt-5\">\n    \t\t<div className=\"col-sm-2\">\n        \t<ul className=\"navbar-nav px-3\">\n  \n            <li>\n              <NavLink exact to=\"/home\" activeStyle={{ fontWeight: \"bold\", color: \"green\" }} >\n                Home\n              </NavLink>\n            </li>\n\n\t\t\t<li>\n              <NavLink exact to=\"/leaderboard\" activeStyle={{ fontWeight: \"bold\", color: \"green\" }} >\n                Leaderboard\n              </NavLink>\n            </li>\n  \n          </ul>\n\t      </div>\n        <div className=\"col-sm-10 pr-sm-5\">\t\t\t\n        \t<Route exact path=\"/\" component={Home}/>\n\t\t\t<Route exact path=\"/home\" component={Home}/>\n          <Route exact path=\"/leaderboard\"\n            render={()=>\n              <Leaderboard\n                account={props.account}\n                username={props.username}\n                setUsername={props.setUsername}\n                handleChange={props.handleChange}\n                leaderboardList={props.leaderboardList}\n              />\n            }\n            />\n          \n        </div>\n        </div>\n      </HashRouter>\n    );\n\n}\n \nexport default Content;","import React, { useState, Component } from 'react';\nimport Web3 from 'web3';\nimport Navi from './Navbar'\nimport Content from './Content'\n// import Leaderboard from '../abis/Leaderboard.json'\n\nclass App extends Component {\n\n\n\tstate = {\n\t\tleaderboardList: [],\n\t}\n\n\t\n\n  constructor(props) {\n    super(props)\n\t\n\tthis.loadWeb3 = this.loadWeb3.bind(this)\n    // this.loadBlockchainData = this.loadBlockchainData.bind(this)\n    this.handleChange = this.handleChange.bind(this)\n        \n    \n  }\n\n  async componentWillMount() {\n    // await this.loadWeb3()\n\t// await this.loadBlockchainData()\n\t\n\t// when loaded call this to reload leaderboard\n\tawait this.loadBoguseaderBoard();\n\n  }\n\n\n  async getScammerLeaderBoard(){\n\n\n\t// call smart contract\n\n\t// make array from highest to lowest\n\n  }\n\n  async loadBoguseaderBoard(){\n\n    this.setState({ score: 9999});\n\n    var ll = [];\n\n    ll.push( {'username':\"bob\", 'address':\"0x71C7656EC7ab88b098defB751B7401B5f6d8976F\", 'score':222});\n    ll.push( {'username':\"alice\", 'address':\"0x04148d6CE66cbb2F5c198c272B8117a5e7a6102E\", 'score':10});\n\n    this.setState({leaderboardList:ll });\n\n  }\n\n\n  async loadWeb3() {\n    if (window.ethereum) {\n      window.web3 = new Web3(window.ethereum)\n      await window.ethereum.enable()\n    }\n    else if (window.web3) {\n      window.web3 = new Web3(window.web3.currentProvider)\n    }\n    else {\n      window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\n    }\n  }\n\n  handleChange(evt) {\n    const { name, value } = evt.target\n    this.setState({\n      [name]: value\n    })\n  }\n\n  // \n  async updateLeaderboard2() {\n\n  }\n\n\n  render() {\n    return (\n      <div>\t\t  \n        <Navi\n          account={this.state.account}\n          username={this.state.username}\n        />\n        <Content\n          account={this.state.account}\n          username={this.state.username}\n          score={this.state.score}\n          leaderboardList={this.state.leaderboardList}          \n          handleChange={this.handleChange}                    \n          updateLeaderboard={this.updateLeaderboard2}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n// import './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}